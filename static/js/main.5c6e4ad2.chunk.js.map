{"version":3,"sources":["components/Cards/Cards.module.css","components/api/Index.js","components/Chart/Chart.js","components/Spinner/Spinner.js","components/Cards/Cards.js","components/CountryPicker/CountryPicker.js","components/Flags/Flag.js","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/Spinner/Spinner.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","iso","iso2","Charts","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","value","options","legend","display","title","text","lineChart","length","borderColor","fill","className","styles","container","Spinner","LdsHourglass","Cards","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","CountryPicker","props","fetchedCountries","setFetchedCountries","FormControl","formControl","style","marginBottom","NativeSelect","onChange","changed","key","Flag","flag","flagArray","getFlagArray","getFlag","flagUrl","find","indFlag","src","alt","App","state","handleCountryChange","event","target","fetchedData","setState","this","Container","coronaImage","maxWidth","margin","Country","Chart","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c6e4ad2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3AV47\",\"card\":\"Cards_card__3JKKm\",\"infected\":\"Cards_infected__3EN7E\",\"recovered\":\"Cards_recovered__10dPq\",\"deaths\":\"Cards_deaths__2uZrI\"};","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    const modifiedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    // console.log(countries);\r\n    return countries.map((country) => ({\r\n      name: country.name,\r\n      iso: country.iso2,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../api/Index\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nfunction Charts({ data: { confirmed, recovered, deaths }, country }) {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: {\r\n          display: true,\r\n          text: `Current state in ${country}`,\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        // labels: dailyData.date.map((arr) => arr),\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0,0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country && country !== \"global\" ? barChart : lineChart}\r\n    </div>\r\n  );\r\n}\r\nexport default Charts;\r\n","import React from \"react\";\r\nimport styles from \"./Spinner.module.css\";\r\n\r\nexport default function Spinner() {\r\n  return <div className={styles.LdsHourglass}></div>;\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nfunction Cards({ data: { confirmed, recovered, deaths, lastUpdate } }) {\r\n  if (!confirmed) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recoveries\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveried from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\nexport default Cards;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../api/Index\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nfunction CountryPicker(props) {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl\r\n      className={styles.formControl}\r\n      style={{ marginBottom: \"30px\" }}\r\n    >\r\n      <NativeSelect value={props.value} onChange={props.changed}>\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country) => (\r\n          <option key={country.name} value={country.name}>\r\n            {country.name}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n}\r\nexport default CountryPicker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchCountries } from \"../api/Index\";\r\n\r\nfunction Flag({ flag }) {\r\n  const [flagArray, getFlagArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getFlag = async () => {\r\n      getFlagArray(await fetchCountries());\r\n    };\r\n    getFlag();\r\n  }, []);\r\n\r\n  //   console.log(flagArray);\r\n  let flagUrl = flagArray.find((indFlag) => indFlag.name === flag);\r\n\r\n  return flag ? (\r\n    <img\r\n      src={`https://www.countryflags.io/${flagUrl.iso}/flat/64.png`}\r\n      alt={flag}\r\n    />\r\n  ) : null;\r\n}\r\n\r\nexport default Flag;\r\n","import React, { Component } from \"react\";\n\nimport styles from \"./App.module.css\";\nimport Charts from \"./components/Chart/Chart\";\nimport Cards from \"./components/Cards/Cards\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport { fetchData } from \"./components/api/Index\";\nimport Flag from \"./components/Flags/Flag\";\nimport coronaImage from \"./images/image.png\";\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data: data });\n  }\n\n  handleCountryChange = async (event) => {\n    let country = event.target.value;\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.Container}>\n        <img\n          src={coronaImage}\n          alt=\"Corona\"\n          style={{ maxWidth: \"200px\", margin: \"50px auto 0\" }}\n        />\n        <Cards data={data || {}} />\n        <div className={styles.Country}>\n          <Flag flag={country} />\n          <CountryPicker\n            value={this.state.country}\n            changed={this.handleCountryChange}\n          />\n        </div>\n        <Charts country={country} data={data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__1Ggq2\",\"Country\":\"App_Country__10cG1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__A5a8u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LdsHourglass\":\"Spinner_LdsHourglass__3GauK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3GkCW\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}